{"version":3,"file":"static/js/888.1ffcd581.chunk.js","mappings":"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","sources":["pages/Api-testing.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/Api.css\";\n\nfunction Api() {\n  const [message, setMessage] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [showMessagesModal, setShowMessagesModal] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      const response = await fetch(\"https://portfolio-backend-jet-phi.vercel.app/api/messages\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message, status }),\n        mode: 'cors',\n      });\n\n      if (response.ok) {\n        setSuccess(true);\n        setMessage(\"\");\n        setStatus(\"\");\n      } else {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error(\"API Error:\", error);\n      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\n        setError(\"CORS Error: Backend server needs to allow requests from this domain. API is currently blocked by browser security policy.\");\n      } else {\n        setError(`Failed to send message: ${error.message}`);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchMessages = async () => {\n    setLoadingMessages(true);\n    try {\n      const response = await fetch(\"https://portfolio-backend-jet-phi.vercel.app/api/messages\", {\n        mode: 'cors',\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Sort messages by created_at date, most recent first\n        const sortedMessages = Array.isArray(data) \n          ? data.sort((a, b) => new Date(b.created_at || b.timestamp || 0) - new Date(a.created_at || a.timestamp || 0))\n          : [];\n        setMessages(sortedMessages);\n        setShowMessagesModal(true);\n      } else {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch messages:\", error);\n      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {\n        setError(\"CORS Error: Cannot fetch messages due to server configuration. Backend needs CORS headers.\");\n      } else {\n        setError(`Failed to fetch messages: ${error.message}`);\n      }\n    } finally {\n      setLoadingMessages(false);\n    }\n  };\n\n  const closeModal = () => {\n    setShowMessagesModal(false);\n    setMessages([]);\n  };\n\n  return (\n    <div id=\"api\">\n      <div className=\"api-page\">\n        <div className=\"api-container\">\n          {/* Header Section */}\n          <div className=\"api-header\">\n            <h1>API Testing Dashboard</h1>\n            <p>Test Robert&apos;s backend API endpoints with real-time validation and monitoring.</p>\n            <p>After submitting your test message, view all stored messages in the database:</p>\n            <button\n              className=\"highlight-link\"\n              onClick={fetchMessages}\n              disabled={loadingMessages}\n            >\n              {loadingMessages ? \"Loading Messages...\" : \"View All Messages Database\"}\n            </button>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"api-content\">\n            {/* API Information Card */}\n            <div className=\"api-info-card\">\n              <h2>API Endpoint</h2>\n              <div className=\"endpoint-display\">\n                POST /api/messages\n              </div>\n              <div className=\"api-features\">\n                <div className=\"feature-item\">\n                  <div className=\"feature-icon\">✓</div>\n                  <div className=\"feature-text\">Real-time message processing</div>\n                </div>\n                <div className=\"feature-item\">\n                  <div className=\"feature-icon\">⚡</div>\n                  <div className=\"feature-text\">Instant validation & response</div>\n                </div>\n                <div className=\"feature-item\">\n                  <div className=\"feature-icon\">🔒</div>\n                  <div className=\"feature-text\">Secure data transmission</div>\n                </div>\n                <div className=\"feature-item\">\n                  <div className=\"feature-icon\">📊</div>\n                  <div className=\"feature-text\">Persistent data storage</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Test Form Card */}\n            <div className=\"api-form-card\">\n              <h2>Test API Request</h2>\n              <form onSubmit={handleSubmit} className=\"api-form\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"message\">Message Content</label>\n                  <input\n                    type=\"text\"\n                    id=\"message\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    placeholder=\"Enter your test message...\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"status\">Status Type</label>\n                  <select\n                    id=\"status\"\n                    value={status}\n                    onChange={(e) => setStatus(e.target.value)}\n                    required\n                  >\n                    <option value=\"\">Select status type...</option>\n                    <option value=\"success\">Success</option>\n                    <option value=\"error\">Error</option>\n                    <option value=\"info\">Info</option>\n                    <option value=\"warning\">Warning</option>\n                  </select>\n                </div>\n                \n                <button type=\"submit\" disabled={isLoading} className=\"submit-btn\">\n                  {isLoading ? (\n                    <>\n                      <div className=\"loading-spinner\"></div>\n                      Sending Request...\n                    </>\n                  ) : (\n                    \"Send API Request\"\n                  )}\n                </button>\n\n                {/* Status Messages */}\n                {success && (\n                  <div className=\"status-message success\">\n                    ✅ Message sent successfully! Check the database to see your entry.\n                  </div>\n                )}\n                \n                {error && (\n                  <div className=\"status-message error\">\n                    ❌ {error}\n                  </div>\n                )}\n              </form>\n            </div>\n          </div>\n        </div>\n\n        {/* Messages Modal */}\n        {showMessagesModal && (\n          <div className=\"modal-overlay\" onClick={closeModal}>\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n              <div className=\"modal-header\">\n                <h2>Database Messages</h2>\n                <button className=\"close-btn\" onClick={closeModal}>×</button>\n              </div>\n              <div className=\"modal-body\">\n                {messages.length === 0 ? (\n                  <p className=\"no-messages\">No messages found in the database.</p>\n                ) : (\n                  <div className=\"messages-list\">\n                    {messages.map((msg, index) => (\n                      <div key={index} className=\"message-item\">\n                        <div className=\"message-header\">\n                          <span className={`status-badge ${msg.status}`}>\n                            {msg.status?.toUpperCase() || 'UNKNOWN'}\n                          </span>\n                          <span className=\"message-date\">\n                            {msg.created_at ? new Date(msg.created_at).toLocaleString() : \n                             msg.timestamp ? new Date(msg.timestamp).toLocaleString() : 'Unknown date'}\n                          </span>\n                        </div>\n                        <div className=\"message-content\">\n                          {msg.message || 'No message content'}\n                        </div>\n                        {msg.id && (\n                          <div className=\"message-id\">ID: {msg.id}</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Api;\n"],"names":["message","setMessage","useState","status","setStatus","isLoading","setIsLoading","error","setError","success","setSuccess","showMessagesModal","setShowMessagesModal","messages","setMessages","loadingMessages","setLoadingMessages","closeModal","_jsx","id","children","_jsxs","className","onClick","async","response","fetch","mode","ok","Error","concat","statusText","data","json","sortedMessages","Array","isArray","sort","a","b","Date","created_at","timestamp","console","name","includes","disabled","onSubmit","e","preventDefault","method","headers","body","JSON","stringify","htmlFor","type","value","onChange","target","placeholder","required","_Fragment","stopPropagation","length","map","msg","index","_msg$status","toUpperCase","toLocaleString"],"sourceRoot":""}